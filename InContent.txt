📂 ServerHome
├── 📝 InContent.txt
├── 📝 README.md
├── 📝 READMEDE.md
├── 📂 bin/
│   ├── 📄 cat.sh
│   ├── 📄 docker.sh
│   ├── 🐍 hosts.py
│   ├── 🐍 ping.py
│   └── 📄 urls.sh
├── 📂 inst/
│   └── 📄 install.sh
├── 📂 server-helb/
│   ├── 📄 help.sh
│   └── 📄 skripts.sh
└── 📂 server-management/
    ├── 📄 systemv.sh
    └── 📄 upgrade.sh

=== Datei-Inhalte ===

📝 --- InContent.txt ---

📝 --- README.md ---
# ServerHome

## Table of Contents

1. [Introduction](#introduction)
2. [Directory Structure](#directory-structure)
3. [Installation](#installation)
   - [Complete Block](#complete-block)
   - [Using curl](#using-curl)
   - [Using wget](#using-wget)
4. [Usage](#usage)
5. [License](#license)

---

## Introduction

This repository contains a collection of server scripts and utilities designed to automate and simplify common administrative tasks.

---

## Directory Structure

```text
📂 ServerHome
├── 📝 InContent.txt
├── 📝 README.md
├── 📝 READMEDE.md
├── 📂 inst/
│   └── 📄 install.sh
├── 📂 server-helb/
│   └── 📄 help_page.sh
├── 📂 server-management/
├── 📂 utilities/
│   └── 🐍 ping_test.py
└── 📂 webapp-install/
```

- **InContent.txt**
  Additional documentation and notes.
- **README.md**
  This document.
- **server-helb/**
  Shell scripts for help pages.
- **server-management/**
  Installer script `install.sh` for all management tools.
- **utilities/**
  Python script `ping_test.py` for ping tests.
- **webapp-install/**
  Web application installation scripts.

---

## Installation
---
### Complete Block

```bash
sudo apt-get update
sudo apt-get install -y curl
sudo curl -fsSL \
  https://raw.githubusercontent.com/kleiveist/ServerHome/main/inst/install.sh \
  -o /usr/local/bin/install.sh \
&& sudo chmod +x /usr/local/bin/install.sh
```
Execute the block below to update your system, install curl, download the installer script, and make it executable:
---

### Using curl

```bash
sudo curl -fsSL \
  https://raw.githubusercontent.com/kleiveist/ServerHome/main/inst/install.sh \
  -o /usr/local/bin/install.sh \
&& sudo chmod +x /usr/local/bin/install.sh
```

### Using wget

```bash
sudo wget -qO /usr/local/bin/install.sh \
  https://raw.githubusercontent.com/kleiveist/ServerHome/main/inst/install.sh \
&& sudo chmod +x /usr/local/bin/install.sh
```

---

## Usage

1. Run the installer script:

   ```bash
   sudo install.sh
   ```

2. List available scripts:

   ```bash
   ls /usr/local/bin
   ```

3. Example: Ping test (Python)

   ```bash
   ping_test.py
   ```

4. help page scripts:

   ```bash
   help_page.sh
   ```

---

## License

This project is licensed under the MIT License. See [LICENSE](LICENSE) for details.

---
### Using curl help_page.sh

```bash
sudo curl -fsSL \
  https://raw.githubusercontent.com/kleiveist/ServerHome/main/server-helb/help_page.sh \
  -o /usr/local/bin/help_page.sh \
&& sudo chmod +x /usr/local/bin/help_page.sh
```
---

📝 --- READMEDE.md ---
# ServerHome

## Inhaltsverzeichnis

1. [Einführung](#einführung)
2. [Verzeichnisstruktur](#verzeichnisstruktur)
3. [Installation](#installation)
   - [Mit `curl`](#mit-curl)
   - [Mit `wget`](#mit-wget)
4. [Verwendung](#verwendung)
5. [Lizenz](#lizenz)

---

## Einführung

Dieses Repository enthält eine Sammlung von Server-Skripten und Hilfsprogrammen zur Automatisierung und Vereinfachung häufiger Verwaltungsaufgaben.

---

## Verzeichnisstruktur

```text
📂 ServerHome
├── 📝 InContent.txt
├── 📝 README.md
├── 📝 READMEDE.md
├── 📂 inst/
│   └── 📄 install.sh
├── 📂 server-helb/
│   └── 📄 help_page.sh
├── 📂 server-management/
├── 📂 utilities/
│   └── 🐍 ping_test.py
└── 📂 webapp-install/
```

- **InContent.txt**
  Zusätzliche Dokumentation und Notizen.
- **README.md**
  Dieses Dokument.
- **server-helb/**
  Shell-Skripte für Hilfeseiten.
- **server-management/**
  Installationsskript `install.sh` für alle Management-Tools.
- **utilities/**
  Python-Skript `ping_test.py` für Ping-Tests.
- **webapp-install/**
  Installationsskripte für Webanwendungen.

---

## Installation
---
### komplettblock
```bash
sudo apt-get update
sudo apt-get install -y curl
sudo curl -fsSL \
  https://raw.githubusercontent.com/kleiveist/ServerHome/main/inst/install.sh \
  -o /usr/local/bin/install.sh \
&& sudo chmod +x /usr/local/bin/install.sh
```
Führen Sie den folgenden Block aus, um das System zu aktualisieren, curl zu installieren, das Installationsskript herunterzuladen und ausführbar zu machen:
---
Führe einen der folgenden Befehle auf deinem Server aus:

### Mit `curl`

```bash
sudo curl -fsSL \
  https://raw.githubusercontent.com/kleiveist/ServerHome/main/inst/install.sh \
  -o /usr/local/bin/install.sh \
&& sudo chmod +x /usr/local/bin/install.sh
```

### Mit `wget`

```bash
sudo wget -qO /usr/local/bin/install.sh \
  https://raw.githubusercontent.com/kleiveist/ServerHome/main/inst/install.sh \
&& sudo chmod +x /usr/local/bin/install.sh
```

---

## Verwendung

1. Installationsskript ausführen:

   ```bash
   sudo install.sh
   ```

2. Verfügbare Skripte auflisten:

   ```bash
   ls /usr/local/bin
   ```

3. Beispiel: Ping-Test (Python)

   ```bash
   ping_test.py
   ```
4. Hilfe seite Skripte:

   ```bash
   help_page.sh
   ```
---

## Lizenz

Dieses Projekt steht unter der MIT License. Siehe [LICENSE](LICENSE) für Details.
---

### Using curl help_page.sh

```bash
sudo curl -fsSL \
  https://raw.githubusercontent.com/kleiveist/ServerHome/main/server-helb/help_page.sh \
  -o /usr/local/bin/help_page.sh \
&& sudo chmod +x /usr/local/bin/help_page.sh
```
---

🐍 --- bin\hosts.py ---
#!/usr/bin/env python3
import os
import socket
from datetime import datetime

HOSTS_FILE = "/etc/hosts"

# Determine IPs from ENV or (for IP1) via socket fallback
def get_ip(env_var):
    ip = os.getenv(env_var)
    if ip:
        return ip
    if env_var == "IP1":
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        try:
            s.connect(("8.8.8.8", 80))
            return s.getsockname()[0]
        finally:
            s.close()
    return None

IP1 = get_ip("IP1")

# Domains come from Bash wrapper via ENV: LOCAL_DOMAIN, GLOBAL_DOMAIN
# Fallback to domain.local and domain.global if unset
local = os.getenv("LOCAL_DOMAIN", "domain.local")
global_dom = os.getenv("GLOBAL_DOMAIN", "domain.global")
# Hardcoded lists:
DOMAINS_IP1 = ["book.local"]
DOMAINS_IP2 = ["book.com"]

# Logging function
def log(msg):
    print(f"{datetime.now():%Y-%m-%d %H:%M:%S} - {msg}")

# Add entries if not present
def add_entries(ip, domains, header):
    if not ip or not domains:
        return
    with open(HOSTS_FILE, "r") as f:
        lines = f.readlines()
    if not any(header in line for line in lines):
        with open(HOSTS_FILE, "a") as f:
            f.write(f"{header}\n")
    with open(HOSTS_FILE, "a") as f:
        for d in domains:
            if d and not any(d in line.split() for line in lines):
                f.write(f"{ip} {d}\n")
                log(f"Entry added: {ip} {d}")

if __name__ == "__main__":
    if os.geteuid() != 0:
        print("This script must be run as root!")
        exit(1)

    add_entries(IP1, DOMAINS_IP1, "#====== LOCAL_DOMAIN ======")
    add_entries(IP1, DOMAINS_IP2, "#====== GLOBAL_DOMAIN ======")
🐍 --- bin\ping.py ---
#!/usr/bin/env python3
import os
import socket
import subprocess
from datetime import datetime

# 1) Try ENV variable, 2) fallback to socket query
def get_server_ip():
    if ip := os.getenv("SERVER_IP"):
        return ip
    # Fallback
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    try:
        s.connect(("8.8.8.8", 80))
        return s.getsockname()[0]
    finally:
        s.close()

# Pass Bash variable as ENV
SERVER_IP = get_server_ip()
# Prefix from first three octets
PREFIX = ".".join(SERVER_IP.split('.')[:3])

HOSTS = {
    "1.1.1.1": "Cloudflare DNS",
    "8.8.8.8": "Google DNS",
    SERVER_IP: "Server",
    f"{PREFIX}.1": "RouterHome",
    f"{PREFIX}.4": "Pi-hole DNS",
    f"{PREFIX}.5": "VPN Server",
    "$LOCAL_DOMAIN": "book-domain1",
    "$GLOBAL_DOMAIN": "book-domain2",
}

def ping_host(host):
    try:
        subprocess.run(
            ["ping", "-c", "3", "-W", "2", host],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
            check=True,
        )
        return True
    except subprocess.CalledProcessError:
        return False

def main():
    print("==== Starting Ping Test ====")
    print(f"Date: {datetime.now():%Y-%m-%d %H:%M:%S}\\n")
    failed = []
    for host, desc in HOSTS.items():
        print(f"Pinging {host} ({desc})…")
        if ping_host(host):
            print(f"{host} ({desc}) is reachable ✅")
        else:
            failed.append(f"{host} ({desc})")
            print(f"{host} ({desc}) is unreachable ❌")
        print()
    print("==== Ping Test Completed ====")
    if failed:
        print("==== Failed Hosts ====")
        print(*failed, sep="\n")
    else:
        print("All hosts are reachable ✅")

if __name__ == "__main__":
    main()
