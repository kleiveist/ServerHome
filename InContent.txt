üìÇ ServerHome
‚îú‚îÄ‚îÄ üìù InContent.txt
‚îú‚îÄ‚îÄ üìù README.md
‚îú‚îÄ‚îÄ üìù READMEDE.md
‚îú‚îÄ‚îÄ üìÇ inst/
‚îÇ   ‚îî‚îÄ‚îÄ üìÑ install.sh
‚îú‚îÄ‚îÄ üìÇ server-helb/
‚îÇ   ‚îî‚îÄ‚îÄ üìÑ help_page.sh
‚îú‚îÄ‚îÄ üìÇ server-management/
‚îú‚îÄ‚îÄ üìÇ utilities/
‚îÇ   ‚îî‚îÄ‚îÄ üêç ping_test.py
‚îî‚îÄ‚îÄ üìÇ webapp-install/

=== Datei-Inhalte ===

üìù --- InContent.txt ---

üìù --- README.md ---
# ServerHome

## Table of Contents

1. [Introduction](#introduction)
2. [Directory Structure](#directory-structure)
3. [Installation](#installation)
   - [Complete Block](#complete-block)
   - [Using curl](#using-curl)
   - [Using wget](#using-wget)
4. [Usage](#usage)
5. [License](#license)

---

## Introduction

This repository contains a collection of server scripts and utilities designed to automate and simplify common administrative tasks.

---

## Directory Structure

```text
üìÇ ServerHome
‚îú‚îÄ‚îÄ üìù InContent.txt
‚îú‚îÄ‚îÄ üìù README.md
‚îú‚îÄ‚îÄ üìÇ server-helb/
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ help_page.sh
‚îÇ   ‚îî‚îÄ‚îÄ üìÑ help_pageA.sh
‚îú‚îÄ‚îÄ üìÇ server-management/
‚îÇ   ‚îî‚îÄ‚îÄ üìÑ install.sh
‚îú‚îÄ‚îÄ üìÇ utilities/
‚îÇ   ‚îî‚îÄ‚îÄ üêç ping_test.py
‚îî‚îÄ‚îÄ üìÇ webapp-install/
```

- **InContent.txt**
  Additional documentation and notes.
- **README.md**
  This document.
- **server-helb/**
  Shell scripts for help pages.
- **server-management/**
  Installer script `install.sh` for all management tools.
- **utilities/**
  Python script `ping_test.py` for ping tests.
- **webapp-install/**
  Web application installation scripts.

---

## Installation
---
### Complete Block

```bash
sudo apt-get update
sudo apt-get install -y curl
sudo curl -fsSL \
  https://raw.githubusercontent.com/kleiveist/ServerHome/main/inst/install.sh \
  -o /usr/local/bin/install.sh \
&& sudo chmod +x /usr/local/bin/install.sh
```
Execute the block below to update your system, install curl, download the installer script, and make it executable:
---

### Using curl

```bash
sudo curl -fsSL \
  https://raw.githubusercontent.com/kleiveist/ServerHome/main/inst/install.sh \
  -o /usr/local/bin/install.sh \
&& sudo chmod +x /usr/local/bin/install.sh
```

### Using wget

```bash
sudo wget -qO /usr/local/bin/install.sh \
  https://raw.githubusercontent.com/kleiveist/ServerHome/main/inst/install.sh \
&& sudo chmod +x /usr/local/bin/install.sh
```

---

## Usage

1. Run the installer script:

   ```bash
   sudo install.sh
   ```

2. List available scripts:

   ```bash
   ls /usr/local/bin
   ```

3. Example: Ping test (Python)

   ```bash
   ping_test.py
   ```

---

## License

This project is licensed under the MIT License. See [LICENSE](LICENSE) for details.

üìù --- READMEDE.md ---
# ServerHome

## Inhaltsverzeichnis

1. [Einf√ºhrung](#einf√ºhrung)
2. [Verzeichnisstruktur](#verzeichnisstruktur)
3. [Installation](#installation)
   - [Mit `curl`](#mit-curl)
   - [Mit `wget`](#mit-wget)
4. [Verwendung](#verwendung)
5. [Lizenz](#lizenz)

---

## Einf√ºhrung

Dieses Repository enth√§lt eine Sammlung von Server-Skripten und Hilfsprogrammen zur Automatisierung und Vereinfachung h√§ufiger Verwaltungsaufgaben.

---

## Verzeichnisstruktur

```text
üìÇ ServerHome
‚îú‚îÄ‚îÄ üìù InContent.txt
‚îú‚îÄ‚îÄ üìù README.md
‚îú‚îÄ‚îÄ üìÇ server-helb/
‚îÇ   ‚îú‚îÄ‚îÄ üìÑ help_page.sh
‚îÇ   ‚îî‚îÄ‚îÄ üìÑ help_pageA.sh
‚îú‚îÄ‚îÄ üìÇ server-management/
‚îÇ   ‚îî‚îÄ‚îÄ üìÑ install.sh
‚îú‚îÄ‚îÄ üìÇ utilities/
‚îÇ   ‚îî‚îÄ‚îÄ üêç ping_test.py
‚îî‚îÄ‚îÄ üìÇ webapp-install/
```

- **InContent.txt**
  Zus√§tzliche Dokumentation und Notizen.
- **README.md**
  Dieses Dokument.
- **server-helb/**
  Shell-Skripte f√ºr Hilfeseiten.
- **server-management/**
  Installationsskript `install.sh` f√ºr alle Management-Tools.
- **utilities/**
  Python-Skript `ping_test.py` f√ºr Ping-Tests.
- **webapp-install/**
  Installationsskripte f√ºr Webanwendungen.

---

## Installation
---
### komplettblock
```bash
sudo apt-get update
sudo apt-get install -y curl
sudo curl -fsSL \
  https://raw.githubusercontent.com/kleiveist/ServerHome/main/inst/install.sh \
  -o /usr/local/bin/install.sh \
&& sudo chmod +x /usr/local/bin/install.sh
```
F√ºhren Sie den folgenden Block aus, um das System zu aktualisieren, curl zu installieren, das Installationsskript herunterzuladen und ausf√ºhrbar zu machen:
---
F√ºhre einen der folgenden Befehle auf deinem Server aus:

### Mit `curl`

```bash
sudo curl -fsSL \
  https://raw.githubusercontent.com/kleiveist/ServerHome/main/inst/install.sh \
  -o /usr/local/bin/install.sh \
&& sudo chmod +x /usr/local/bin/install.sh
```

### Mit `wget`

```bash
sudo wget -qO /usr/local/bin/install.sh \
  https://raw.githubusercontent.com/kleiveist/ServerHome/main/inst/install.sh \
&& sudo chmod +x /usr/local/bin/install.sh
```

---

## Verwendung

1. Installationsskript ausf√ºhren:

   ```bash
   sudo install.sh
   ```

2. Verf√ºgbare Skripte auflisten:

   ```bash
   ls /usr/local/bin
   ```

3. Beispiel: Ping-Test (Python)

   ```bash
   ping_test.py
   ```

---

## Lizenz

Dieses Projekt steht unter der MIT License. Siehe [LICENSE](LICENSE) f√ºr Details.

üêç --- utilities\ping_test.py ---
#!/usr/bin/env python3

import subprocess
import time
from datetime import datetime

# Serverliste
HOSTS = {
# =================IP====================
    "1.1.1.1": "Cloudflare DNS",
    "8.8.8.8": "Google DNS",
#    "88.88.88.88": "ServerVPN",
#    "88.88.88.1": "RouterHome",
#    "88.88.88.4": "Pi-hole DNS",
#    "88.88.88.5": "VPN Server",
#    "88.88.88.88": "cloud-server",
#    "88.88.88.88": "office server",
# =================Domain====================
    "domain123.com": "ServerVPN Domain",
#    "cloud.local": "cloud-domain2",
#    "nextcloud.local": "cloud-domain2",
#    "office.local": "office-domain1",
#    "onlyoffice.local": "office-domain2",
#    "officeserver.local": "office-domain3",
}

def log(msg: str):
    """Gibt msg mit Zeitstempel und 0,5 s Pause aus."""
    ts = datetime.now().strftime('%Y-%m-%d %H:%M:%S.%f')[:-3]
    print(f"[{ts}] {msg}")
    time.sleep(0.5)

def ping_host(host: str) -> bool:
    try:
        subprocess.run(
            ["ping", "-c", "3", "-W", "2", host],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.DEVNULL,
            check=True,
        )
        return True
    except subprocess.CalledProcessError:
        return False

def main():
    log("==== Ping-Test starten ====")
    failed_hosts = []

    for host, desc in HOSTS.items():
        log(f"Pinge {host} ({desc})‚Ä¶")
        if ping_host(host):
            log(f"{host} ({desc}) ist erreichbar ‚úÖ")
        else:
            log(f"{host} ({desc}) ist nicht erreichbar ‚ùå")
            failed_hosts.append(f"{host} ({desc})")

    log("==== Ping-Test abgeschlossen ====")
    if failed_hosts:
        log("==== Fehlgeschlagene Hosts ====")
        for f in failed_hosts:
            log(f)
    else:
        log("Alle Hosts sind erreichbar ‚úÖ")

    input("==== [Enter], um das Skript zu beenden ====\n")

if __name__ == "__main__":
    main()
